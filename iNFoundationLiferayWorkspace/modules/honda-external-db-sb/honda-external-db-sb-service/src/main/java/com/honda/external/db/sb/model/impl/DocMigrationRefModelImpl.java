/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.honda.external.db.sb.model.impl;

import com.honda.external.db.sb.model.DocMigrationRef;
import com.honda.external.db.sb.model.DocMigrationRefModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DocMigrationRef service. Represents a row in the &quot;Documentum_Migration_Ref&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DocMigrationRefModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DocMigrationRefImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DocMigrationRefImpl
 * @generated
 */
public class DocMigrationRefModelImpl
	extends BaseModelImpl<DocMigrationRef> implements DocMigrationRefModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a doc migration ref model instance should use the <code>DocMigrationRef</code> interface instead.
	 */
	public static final String TABLE_NAME = "Documentum_Migration_Ref";

	public static final Object[][] TABLE_COLUMNS = {
		{"mig_ref_id", Types.BIGINT}, {"ahmc_app_code", Types.VARCHAR},
		{"content_type", Types.VARCHAR}, {"division", Types.VARCHAR},
		{"department", Types.VARCHAR}, {"liferay_document_type", Types.VARCHAR},
		{"liferay_folder", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mig_ref_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ahmc_app_code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content_type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("division", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("department", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("liferay_document_type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("liferay_folder", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Documentum_Migration_Ref (mig_ref_id LONG not null primary key,ahmc_app_code VARCHAR(75) null,content_type VARCHAR(75) null,division VARCHAR(75) null,department VARCHAR(75) null,liferay_document_type VARCHAR(75) null,liferay_folder VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Documentum_Migration_Ref";

	public static final String ORDER_BY_JPQL =
		" ORDER BY docMigrationRef.mig_ref_id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Documentum_Migration_Ref.mig_ref_id ASC";

	public static final String DATA_SOURCE = "extDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AHMC_APP_CODE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DEPARTMENT_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DIVISION_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MIG_REF_ID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DocMigrationRefModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _mig_ref_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMig_ref_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _mig_ref_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DocMigrationRef.class;
	}

	@Override
	public String getModelClassName() {
		return DocMigrationRef.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DocMigrationRef, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DocMigrationRef, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DocMigrationRef, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DocMigrationRef)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DocMigrationRef, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DocMigrationRef, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DocMigrationRef)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DocMigrationRef, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DocMigrationRef, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DocMigrationRef>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DocMigrationRef.class.getClassLoader(), DocMigrationRef.class,
			ModelWrapper.class);

		try {
			Constructor<DocMigrationRef> constructor =
				(Constructor<DocMigrationRef>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<DocMigrationRef, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DocMigrationRef, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DocMigrationRef, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<DocMigrationRef, Object>>();
		Map<String, BiConsumer<DocMigrationRef, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DocMigrationRef, ?>>();

		attributeGetterFunctions.put(
			"mig_ref_id", DocMigrationRef::getMig_ref_id);
		attributeSetterBiConsumers.put(
			"mig_ref_id",
			(BiConsumer<DocMigrationRef, Long>)DocMigrationRef::setMig_ref_id);
		attributeGetterFunctions.put(
			"ahmc_app_code", DocMigrationRef::getAhmc_app_code);
		attributeSetterBiConsumers.put(
			"ahmc_app_code",
			(BiConsumer<DocMigrationRef, String>)
				DocMigrationRef::setAhmc_app_code);
		attributeGetterFunctions.put(
			"content_type", DocMigrationRef::getContent_type);
		attributeSetterBiConsumers.put(
			"content_type",
			(BiConsumer<DocMigrationRef, String>)
				DocMigrationRef::setContent_type);
		attributeGetterFunctions.put("division", DocMigrationRef::getDivision);
		attributeSetterBiConsumers.put(
			"division",
			(BiConsumer<DocMigrationRef, String>)DocMigrationRef::setDivision);
		attributeGetterFunctions.put(
			"department", DocMigrationRef::getDepartment);
		attributeSetterBiConsumers.put(
			"department",
			(BiConsumer<DocMigrationRef, String>)
				DocMigrationRef::setDepartment);
		attributeGetterFunctions.put(
			"liferay_document_type", DocMigrationRef::getLiferay_document_type);
		attributeSetterBiConsumers.put(
			"liferay_document_type",
			(BiConsumer<DocMigrationRef, String>)
				DocMigrationRef::setLiferay_document_type);
		attributeGetterFunctions.put(
			"liferay_folder", DocMigrationRef::getLiferay_folder);
		attributeSetterBiConsumers.put(
			"liferay_folder",
			(BiConsumer<DocMigrationRef, String>)
				DocMigrationRef::setLiferay_folder);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getMig_ref_id() {
		return _mig_ref_id;
	}

	@Override
	public void setMig_ref_id(long mig_ref_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mig_ref_id = mig_ref_id;
	}

	@Override
	public String getAhmc_app_code() {
		if (_ahmc_app_code == null) {
			return "";
		}
		else {
			return _ahmc_app_code;
		}
	}

	@Override
	public void setAhmc_app_code(String ahmc_app_code) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ahmc_app_code = ahmc_app_code;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalAhmc_app_code() {
		return getColumnOriginalValue("ahmc_app_code");
	}

	@Override
	public String getContent_type() {
		if (_content_type == null) {
			return "";
		}
		else {
			return _content_type;
		}
	}

	@Override
	public void setContent_type(String content_type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_content_type = content_type;
	}

	@Override
	public String getDivision() {
		if (_division == null) {
			return "";
		}
		else {
			return _division;
		}
	}

	@Override
	public void setDivision(String division) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_division = division;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalDivision() {
		return getColumnOriginalValue("division");
	}

	@Override
	public String getDepartment() {
		if (_department == null) {
			return "";
		}
		else {
			return _department;
		}
	}

	@Override
	public void setDepartment(String department) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_department = department;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalDepartment() {
		return getColumnOriginalValue("department");
	}

	@Override
	public String getLiferay_document_type() {
		if (_liferay_document_type == null) {
			return "";
		}
		else {
			return _liferay_document_type;
		}
	}

	@Override
	public void setLiferay_document_type(String liferay_document_type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_liferay_document_type = liferay_document_type;
	}

	@Override
	public String getLiferay_folder() {
		if (_liferay_folder == null) {
			return "";
		}
		else {
			return _liferay_folder;
		}
	}

	@Override
	public void setLiferay_folder(String liferay_folder) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_liferay_folder = liferay_folder;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DocMigrationRef.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DocMigrationRef toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DocMigrationRef>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DocMigrationRefImpl docMigrationRefImpl = new DocMigrationRefImpl();

		docMigrationRefImpl.setMig_ref_id(getMig_ref_id());
		docMigrationRefImpl.setAhmc_app_code(getAhmc_app_code());
		docMigrationRefImpl.setContent_type(getContent_type());
		docMigrationRefImpl.setDivision(getDivision());
		docMigrationRefImpl.setDepartment(getDepartment());
		docMigrationRefImpl.setLiferay_document_type(
			getLiferay_document_type());
		docMigrationRefImpl.setLiferay_folder(getLiferay_folder());

		docMigrationRefImpl.resetOriginalValues();

		return docMigrationRefImpl;
	}

	@Override
	public int compareTo(DocMigrationRef docMigrationRef) {
		long primaryKey = docMigrationRef.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DocMigrationRef)) {
			return false;
		}

		DocMigrationRef docMigrationRef = (DocMigrationRef)object;

		long primaryKey = docMigrationRef.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DocMigrationRef> toCacheModel() {
		DocMigrationRefCacheModel docMigrationRefCacheModel =
			new DocMigrationRefCacheModel();

		docMigrationRefCacheModel.mig_ref_id = getMig_ref_id();

		docMigrationRefCacheModel.ahmc_app_code = getAhmc_app_code();

		String ahmc_app_code = docMigrationRefCacheModel.ahmc_app_code;

		if ((ahmc_app_code != null) && (ahmc_app_code.length() == 0)) {
			docMigrationRefCacheModel.ahmc_app_code = null;
		}

		docMigrationRefCacheModel.content_type = getContent_type();

		String content_type = docMigrationRefCacheModel.content_type;

		if ((content_type != null) && (content_type.length() == 0)) {
			docMigrationRefCacheModel.content_type = null;
		}

		docMigrationRefCacheModel.division = getDivision();

		String division = docMigrationRefCacheModel.division;

		if ((division != null) && (division.length() == 0)) {
			docMigrationRefCacheModel.division = null;
		}

		docMigrationRefCacheModel.department = getDepartment();

		String department = docMigrationRefCacheModel.department;

		if ((department != null) && (department.length() == 0)) {
			docMigrationRefCacheModel.department = null;
		}

		docMigrationRefCacheModel.liferay_document_type =
			getLiferay_document_type();

		String liferay_document_type =
			docMigrationRefCacheModel.liferay_document_type;

		if ((liferay_document_type != null) &&
			(liferay_document_type.length() == 0)) {

			docMigrationRefCacheModel.liferay_document_type = null;
		}

		docMigrationRefCacheModel.liferay_folder = getLiferay_folder();

		String liferay_folder = docMigrationRefCacheModel.liferay_folder;

		if ((liferay_folder != null) && (liferay_folder.length() == 0)) {
			docMigrationRefCacheModel.liferay_folder = null;
		}

		return docMigrationRefCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DocMigrationRef, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DocMigrationRef, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DocMigrationRef, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((DocMigrationRef)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DocMigrationRef, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DocMigrationRef, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DocMigrationRef, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DocMigrationRef)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DocMigrationRef>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _mig_ref_id;
	private String _ahmc_app_code;
	private String _content_type;
	private String _division;
	private String _department;
	private String _liferay_document_type;
	private String _liferay_folder;

	public <T> T getColumnValue(String columnName) {
		Function<DocMigrationRef, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DocMigrationRef)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mig_ref_id", _mig_ref_id);
		_columnOriginalValues.put("ahmc_app_code", _ahmc_app_code);
		_columnOriginalValues.put("content_type", _content_type);
		_columnOriginalValues.put("division", _division);
		_columnOriginalValues.put("department", _department);
		_columnOriginalValues.put(
			"liferay_document_type", _liferay_document_type);
		_columnOriginalValues.put("liferay_folder", _liferay_folder);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mig_ref_id", 1L);

		columnBitmasks.put("ahmc_app_code", 2L);

		columnBitmasks.put("content_type", 4L);

		columnBitmasks.put("division", 8L);

		columnBitmasks.put("department", 16L);

		columnBitmasks.put("liferay_document_type", 32L);

		columnBitmasks.put("liferay_folder", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DocMigrationRef _escapedModel;

}